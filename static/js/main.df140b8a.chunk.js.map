{"version":3,"sources":["components/checkbox.js","contextMenu/ContextMenu.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","props","type","id","name","onChange","handleInputChange","htmlFor","ContextMenu","Menu","MenuItem","SubMenu","MyContextMenu","onRowDelete","e","data","onRowInsertAbove","onRowInsertBelow","this","idx","rowIdx","onClick","title","React","Component","DraggableContainer","require","DraggableHeader","ContextMenuTrigger","defaultColumnProperties","sortable","editable","draggable","visible","columns","key","sortDescendingFirst","map","c","rows","arr","i","push","count","createRows","originalRows","slice","App","state","onGridRowsUpdated","fromRow","toRow","updated","setState","onHeaderDrop","source","target","stateCopy","Object","assign","columnSourceIndex","findIndex","columnTargetIndex","splice","emptyColumns","reorderedColumns","onGridSort","sortColumn","sortDirection","sort","a","b","onToggleFilter","console","log","prevState","enableHeaderFilters","filters","handleFilterChange","filter","newFilters","filterTerm","column","deleteRow","insertRowAbove","insertRow","insertRowBelow","newRow","event","cloneColumns","length","rowGetter","rowsCount","minHeight","enableCellSelect","contextMenu","RowsContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df140b8a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Checkbox = props => (\r\n  <div>\r\n    <p>Hide column</p>\r\n    <input type=\"checkbox\" id=\"id\" name=\"ID\" onChange={props.handleInputChange} />\r\n    <label htmlFor=\"id\">ID</label>\r\n    <input type=\"checkbox\" id=\"title\" name=\"Title\" onChange={props.handleInputChange} />\r\n    <label htmlFor=\"title\">Title</label>\r\n    <input type=\"checkbox\" id=\"count\" name=\"Count\" onChange={props.handleInputChange} />\r\n    <label htmlFor=\"count\">Count</label>\r\n  </div> \r\n)","import React from 'react'\r\nimport { Menu } from 'react-data-grid-addons'\r\nconst { ContextMenu, MenuItem, SubMenu } = Menu\r\n\r\n\r\nclass MyContextMenu extends React.Component {\r\n\r\n  onRowDelete = (e, data) => {\r\n    if (typeof this.props.onRowDelete === 'function') {\r\n      this.props.onRowDelete(e, data);\r\n    }\r\n  };\r\n\r\n  onRowInsertAbove = (e, data) => {\r\n    if (typeof this.props.onRowInsertAbove === 'function') {\r\n      this.props.onRowInsertAbove(e, data);\r\n    }\r\n  };\r\n\r\n  onRowInsertBelow = (e, data) => {\r\n    if (typeof this.props.onRowInsertBelow === 'function') {\r\n      this.props.onRowInsertBelow(e, data);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { idx, id, rowIdx } = this.props;\r\n\r\n    return (\r\n      <ContextMenu id={id}>\r\n        <MenuItem data={{ rowIdx, idx }} onClick={this.onRowDelete}>Delete Row</MenuItem>\r\n        <SubMenu title=\"Insert Row\">\r\n          <MenuItem data={{ rowIdx, idx }} onClick={this.onRowInsertAbove}>Above</MenuItem>\r\n          <MenuItem data={{ rowIdx, idx }} onClick={this.onRowInsertBelow}>Below</MenuItem>\r\n        </SubMenu>\r\n      </ContextMenu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyContextMenu","import React from 'react'\nimport ReactDataGrid from 'react-data-grid'\nimport 'react-data-grid/dist/react-data-grid.css'\nimport 'react-data-grid-addons/dist/react-data-grid-addons.css'\nimport './App.css'\nimport { Menu } from 'react-data-grid-addons'\nimport { Checkbox } from './components/checkbox'\nimport MyContextMenu from './contextMenu/ContextMenu'\nconst {\n  DraggableHeader: { DraggableContainer }\n} = require(\"react-data-grid-addons\")\nconst { ContextMenuTrigger } = Menu;\n\nconst defaultColumnProperties = {\n  sortable: true,\n  editable: true,\n  draggable: true,\n  visible: true\n}\n\nconst columns = [\n  { key: 'id', name: 'ID', sortDescendingFirst: true },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }].map(c => ({ ...c, ...defaultColumnProperties }))\n\n\nconst createRows = () => {\n  const arr = []\n  for (let i = 1; i < 100; i++) {\n    arr.push({\n      id: i,\n      title: `Title ${i}`,\n      count: i * 20\n    })\n  }\n  return arr\n}\n\nconst rows = createRows()\nconst originalRows = rows.slice(0)\n\nclass App extends React.Component {\n  state = { rows, columns, originalRows }\n\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    this.setState(state => {\n      const rows = state.rows.slice()\n      for (let i = fromRow; i <= toRow; i++) {\n        rows[i] = { ...rows[i], ...updated }\n      }\n      return { rows }\n    });\n  };\n\n  onHeaderDrop = (source, target) => {\n    const stateCopy = Object.assign({}, this.state)\n    const columnSourceIndex = this.state.columns.findIndex(\n      i => i.key === source\n    )\n    const columnTargetIndex = this.state.columns.findIndex(\n      i => i.key === target\n    )\n\n    stateCopy.columns.splice(\n      columnTargetIndex,\n      0,\n      stateCopy.columns.splice(columnSourceIndex, 1)[0]\n    )\n\n    const emptyColumns = Object.assign({}, this.state, { columns: [] })\n    this.setState(emptyColumns)\n\n    const reorderedColumns = Object.assign({}, this.state, {\n      columns: stateCopy.columns\n    })\n\n    this.setState(reorderedColumns)\n  }\n\n  onGridSort = (sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === \"ASC\") {\n        return (a[sortColumn] > b[sortColumn]) ? 1 : -1\n      } else if (sortDirection === \"DESC\") {\n        return (a[sortColumn] < b[sortColumn]) ? 1 : -1\n      }\n    }\n    const rows = sortDirection === \"NONE\" ? this.state.originalRows.slice() : this.state.rows.slice().sort(comparer)\n\n    this.setState({ rows, sortColumn, sortDirection })\n\n  }\n\n  onToggleFilter = () => {\n    console.log(this.state);\n    this.setState(prevState => {\n      const enableHeaderFilters = !prevState.enableHeaderFilters;\n\n      if (!enableHeaderFilters) {\n        return {\n          enableHeaderFilters,\n          filters: {}\n        }\n      }\n      return { enableHeaderFilters }\n    })\n  }\n\n  handleFilterChange = (filter) => {\n    const newFilters = { ...this.state.filters };\n    if (filter.filterTerm) {\n      newFilters[filter.column.key] = filter;\n    } else {\n      delete newFilters[filter.column.key];\n    }\n\n    this.setState({ filters: newFilters });\n\n  };\n\n  deleteRow = (e, { rowIdx }) => {\n    this.state.rows.splice(rowIdx, 1);\n    this.setState({ rows: this.state.rows });\n  };\n\n  insertRowAbove = (e, { rowIdx }) => {\n    this.insertRow(rowIdx);\n  };\n\n  insertRowBelow = (e, { rowIdx }) => {\n    this.insertRow(rowIdx + 1);\n  };\n\n  insertRow = (rowIdx) => {\n    const newRow = {\n      id: rowIdx + 1,\n      title: `Title ${rowIdx + 1}`,\n      count: rowIdx + 20\n    };\n\n    const rows = [...this.state.rows];\n    rows.splice(rowIdx, 0, newRow);\n\n    this.setState({ rows });\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const cloneColumns = [...this.state.columns]\n    for (let i = 0; i < cloneColumns.length; i++) {\n      const column = cloneColumns[i]\n      if (target.name === column.name) {\n        column.visible = !column.visible\n      }\n    }\n    this.setState({\n      columns: cloneColumns\n    })\n  }\n\n\n  render() {\n    return (\n      <>\n        <Checkbox handleInputChange={this.handleInputChange} />\n\n        <DraggableContainer onHeaderDrop={this.onHeaderDrop}>\n          <ReactDataGrid\n            columns={this.state.columns.filter(column => column.visible === true)}\n            rowGetter={i => this.state.rows[i]}\n            rowsCount={this.state.rows.length}\n            minHeight={350}\n            sortDirection={this.state.sortDirection}\n            sortColumn={this.state.sortColumn}\n            onGridRowsUpdated={this.onGridRowsUpdated}\n            enableCellSelect\n            onGridSort={this.onGridSort}\n            contextMenu={\n              <MyContextMenu\n                id=\"customizedContextMenu\"\n                onRowDelete={this.deleteRow}\n                onRowInsertAbove={this.insertRowAbove}\n                onRowInsertBelow={this.insertRowBelow}\n              />\n            }\n            RowsContainer={ContextMenuTrigger}\n          />\n        </DraggableContainer>\n      </>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}